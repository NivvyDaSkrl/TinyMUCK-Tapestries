*************** extern int rwhocli_userlogout(const char *uid);
*** 187,193 ****
  void    process_commands(void);
  void    shovechars(int portc, int* portv);
  void    shutdownsock(struct descriptor_data * d);
- struct descriptor_data *initializesock(int s, const char *hostname);
  void    make_nonblocking(int s);
  void    freeqs(struct descriptor_data * d);
  void    welcome_user(struct descriptor_data * d);
--- 197,203 ----
  void    process_commands(void);
  void    shovechars(int portc, int* portv);
  void    shutdownsock(struct descriptor_data * d);
+ struct descriptor_data *initializesock(int s, const char *hostname, int ssl);
  void    make_nonblocking(int s);
  void    freeqs(struct descriptor_data * d);
  void    welcome_user(struct descriptor_data * d);
*************** int     boot_off(dbref player);
*** 197,203 ****
  void    boot_player_off(dbref player);
  const char *addrout(long, unsigned short, unsigned short);
  void    dump_users(struct descriptor_data * d, char *user);
- struct descriptor_data *new_connection(int sock, int port);
  void    parse_connect(const char *msg, char *command, char *user, char *pass);
  void    set_userstring(char **userstring, const char *command);
  int     do_command(struct descriptor_data * d, char *command);
--- 207,213 ----
  void    boot_player_off(dbref player);
  const char *addrout(long, unsigned short, unsigned short);
  void    dump_users(struct descriptor_data * d, char *user);
+ struct descriptor_data *new_connection(int sock, int port, int is_ssl);
  void    parse_connect(const char *msg, char *command, char *user, char *pass);
  void    set_userstring(char **userstring, const char *command);
  int     do_command(struct descriptor_data * d, char *command);
*************** main(int argc, char **argv)
*** 333,348 ****
                outfile_name = argv[i];
                break;
              default:
-                whatport[portcount] = atoi(argv[i]);
-                if (portcount>= MAX_LISTEN_PORTS) {
-                    show_program_usage(*argv);
-                }
-                if (whatport[portcount]<  1 || whatport[portcount]>  65535) {
-                    show_program_usage(*argv);
                }
-                portcount++;
-                break;
-            }
        }
     }
     if (plain_argnum<  2) {
--- 345,367 ----
                outfile_name = argv[i];
                break;
              default:
+                        if (argv[i][0] == 's') {
+                                ssl_init = 1;
+                                sock[portcount].is_ssl = 1;
+                                whatport[portcount] = atoi(argv[i]+1);
+                        } else {
+                                sock[portcount].is_ssl = 0;
+                                whatport[portcount] = atoi(argv[i]);
+                        }
+                        if (portcount>= MAX_LISTEN_PORTS) {
+                                show_program_usage(*argv);
+                        }
+                        if (whatport[portcount]<  1 || whatport[portcount]>  65535) {
+                                show_program_usage(*argv);
+                        }
+                        portcount++;
+                        break;
                }
        }
     }
     if (plain_argnum<  2) {
*************** long      max_open_files(void)
*** 813,829 ****
  void
  goodbye_user(struct descriptor_data * d)
  {
     write(d->descriptor, "\r\n", 2);
     write(d->descriptor, tp_leave_mesg, strlen(tp_leave_mesg));
     write(d->descriptor, "\r\n\r\n", 4);
  }
  
  void
  idleboot_user(struct descriptor_data * d)
  {
-     write(d->descriptor, "\r\n", 2);
-     write(d->descriptor, tp_idle_mesg, strlen(tp_idle_mesg));
-     write(d->descriptor, "\r\n\r\n", 4);
     d->booted=1;
  }
  
--- 851,891 ----
  void
  goodbye_user(struct descriptor_data * d)
  {
+        BIO *io,*ssl_bio;
+ 
+        if(d->ssl) {
+                io=BIO_new(BIO_f_buffer());
+                ssl_bio=BIO_new(BIO_f_ssl());
+                BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+                BIO_push(io, ssl_bio);
+                BIO_write(io, "\r\n", 2);
+                BIO_write(io, tp_leave_mesg, strlen(tp_leave_mesg));
+                BIO_write(io, "\r\n\r\n", 4);
+        } else {
     write(d->descriptor, "\r\n", 2);
     write(d->descriptor, tp_leave_mesg, strlen(tp_leave_mesg));
     write(d->descriptor, "\r\n\r\n", 4);
+        }
  }
  
  void
  idleboot_user(struct descriptor_data * d)
  {
+        BIO *io,*ssl_bio;
+ 
+        if(d->ssl) {
+                io=BIO_new(BIO_f_buffer());
+                ssl_bio=BIO_new(BIO_f_ssl());
+                BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+                BIO_push(io, ssl_bio);
+                BIO_write(io, "\r\n", 2);
+                BIO_write(io, tp_idle_mesg, strlen(tp_idle_mesg));
+                BIO_write(io, "\r\n\r\n", 4);
+        } else {
+                write(d->descriptor, "\r\n", 2);
+                write(d->descriptor, tp_idle_mesg, strlen(tp_idle_mesg));
+                write(d->descriptor, "\r\n\r\n", 4);
+        }
     d->booted=1;
  }
  
*************** shovechars(int portc, int* portv)
*** 850,857 ****
     int openfiles_max;
  
     for (socknum = 0; socknum<  portc; socknum++) {
-        sock[socknum] = make_socket(portv[socknum]);
-        maxd = sock[socknum] + 1;
        numsocks++;
     }
     gettimeofday(&last_slice, (struct timezone *) 0);
--- 912,919 ----
     int openfiles_max;
  
     for (socknum = 0; socknum<  portc; socknum++) {
+        sock[socknum].s = make_socket(portv[socknum]);
+        maxd = sock[socknum].s + 1;
        numsocks++;
     }
     gettimeofday(&last_slice, (struct timezone *) 0);
*************** shovechars(int portc, int* portv)
*** 894,900 ****
        FD_ZERO(&output_set);
        if (ndescriptors<  avail_descriptors) {
            for (socknum = 0; socknum<  numsocks; socknum++) {
-                FD_SET(sock[socknum],&input_set);
            }
        }
        for (d = descriptor_list; d; d = d->next) {
--- 956,962 ----
        FD_ZERO(&output_set);
        if (ndescriptors<  avail_descriptors) {
            for (socknum = 0; socknum<  numsocks; socknum++) {
+                FD_SET(sock[socknum].s,&input_set);
            }
        }
        for (d = descriptor_list; d; d = d->next) {
*************** shovechars(int portc, int* portv)
*** 939,946 ****
            sel_prof_idle_use++;
            (void) time(&now);
            for (socknum = 0; socknum<  numsocks; socknum++) {
-                if (FD_ISSET(sock[socknum],&input_set)) {
-                    if (!(newd = new_connection(sock[socknum], portv[socknum]))) {
                        if (errno
                                &&  errno != EINTR
                                &&  errno != EMFILE
--- 1001,1009 ----
            sel_prof_idle_use++;
            (void) time(&now);
            for (socknum = 0; socknum<  numsocks; socknum++) {
+                if (FD_ISSET(sock[socknum].s,&input_set)) {
+                    if (!(newd = new_connection(sock[socknum].s, portv[socknum],
+                                                                                sock[socknum].is_ssl))) {
                        if (errno
                                &&  errno != EINTR
                                &&  errno != EMFILE
*************** wall_wizards(const char *msg)
*** 1092,1115 ****
  
  
  struct descriptor_data *
- new_connection(int sock, int port)
  {
     int     newsock;
     struct sockaddr_in addr;
     int     addr_len;
     char    hostname[128];
  
     addr_len = sizeof(addr);
     newsock = accept(sock, (struct sockaddr *)&  addr,&addr_len);
-     if (newsock<  0) {
        return 0;
     } else {
-        strcpy(hostname, addrout(addr.sin_addr.s_addr, addr.sin_port, port));
-        log_status("ACCEPT: %s(%d) on descriptor %d\n", hostname,
-                    ntohs(addr.sin_port), newsock);
-        log_status("CONCOUNT: There are now %d open connections.\n",
-                    ndescriptors);
-        return initializesock(newsock, hostname);
     }
  }
  
--- 1155,1191 ----
  
  
  struct descriptor_data *
+ new_connection(int sock, int port, int is_ssl)
  {
     int     newsock;
     struct sockaddr_in addr;
     int     addr_len;
     char    hostname[128];
  
+        SSL             *ssl = NULL;
+        BIO             *sbio;
+ 
     addr_len = sizeof(addr);
     newsock = accept(sock, (struct sockaddr *)&  addr,&addr_len);
+                if (newsock<  0) {
        return 0;
     } else {
+                if (is_ssl) {
+                        sbio = BIO_new_socket(newsock, BIO_NOCLOSE);
+                        ssl = SSL_new(ctx);
+                        SSL_set_bio(ssl, sbio, sbio);
+ 
+                        if (SSL_accept(ssl)<=0) {
+                                close(newsock);
+                                return 0;
+                        }
+                }
+                strcpy(hostname, addrout(addr.sin_addr.s_addr, addr.sin_port, port));
+                log_status("ACCEPT: %s(%d) on descriptor %d\n", hostname,
+                                ntohs(addr.sin_port), newsock);
+                log_status("CONCOUNT: There are now %d open connections.\n",
+                                ndescriptors);
+                return initializesock(newsock, hostname, ssl);
     }
  }
  
*************** shutdownsock(struct descriptor_data * d)
*** 1318,1324 ****
  }
  
  struct descriptor_data *
- initializesock(int s, const char *hostname)
  {
     struct descriptor_data *d;
     char buf[128], *ptr;
--- 1394,1400 ----
  }
  
  struct descriptor_data *
+ initializesock(int s, const char *hostname, int ssl)
  {
     struct descriptor_data *d;
     char buf[128], *ptr;
*************** process_output(struct descriptor_data * d)
*** 1498,1504 ****
         return 1;
     }
  
     for (qp =&d->output.head; cur = *qp;) {
        cnt = write(d->descriptor, cur->start, cur->nchars);
        if (cnt<  0) {
            if (errno == EWOULDBLOCK)
--- 1576,1597 ----
         return 1;
     }
  
+ 
+        if(d->ssl) {
+                io=BIO_new(BIO_f_buffer());
+                ssl_bio=BIO_new(BIO_f_ssl());
+                BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+                BIO_push(io, ssl_bio);
+        }
+ 
     for (qp =&d->output.head; cur = *qp;) {
+        if(d->ssl) {
+        cnt = BIO_write(io, cur->start, cur->nchars);
+        fprintf(stderr, "Write Returned: %d...\n", cnt);
+        BIO_flush(io);
+        fprintf(stderr, "Flushed Output");
+        }
+        else
        cnt = write(d->descriptor, cur->start, cur->nchars);
        if (cnt<  0) {
            if (errno == EWOULDBLOCK)
*************** close_sockets(const char *msg)
*** 1930,1944 ****
  {
     struct descriptor_data *d, *dnext;
     int socknum;
  
     for (d = descriptor_list; d; d = dnext) {
         dnext = d->next;
-         write(d->descriptor, msg, strlen(msg));
-         write(d->descriptor, shutdown_message, strlen(shutdown_message));
         clearstrings(d);                       /** added to clean up **/
-         if (shutdown(d->descriptor, 2)<  0)
-             perror("shutdown");
-         close(d->descriptor);
         freeqs(d);                             /****/
         *d->prev = d->next;                    /****/
         if (d->next)                           /****/
--- 2031,2061 ----
  {
     struct descriptor_data *d, *dnext;
     int socknum;
+        BIO *io,*ssl_bio;
  
     for (d = descriptor_list; d; d = dnext) {
         dnext = d->next;
+                if(d->ssl) {
+                        io=BIO_new(BIO_f_buffer());
+                        ssl_bio=BIO_new(BIO_f_ssl());
+                        BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+                        BIO_push(io, ssl_bio);
+                        BIO_write(io, msg, strlen(msg));
+                        BIO_write(io, shutdown_message, strlen(shutdown_message));
+                        if (shutdown(d->descriptor, 2)<  0)
+                                perror("shutdown");
+                        if(!SSL_shutdown(d->ssl))
+                                perror("shutdown");
+                        SSL_free(d->ssl);
+                        close(d->descriptor);
+                } else {
+                        write(d->descriptor, msg, strlen(msg));
+                        write(d->descriptor, shutdown_message, strlen(shutdown_message));
+                        if (shutdown(d->descriptor, 2)<  0)
+                                perror("shutdown");
+                        close(d->descriptor);
+                }
         clearstrings(d);                       /** added to clean up **/
         freeqs(d);                             /****/
         *d->prev = d->next;                    /****/
         if (d->next)                           /****/
*************** close_sockets(const char *msg)
*** 1951,1957 ****
         ndescriptors--;                                /****/
     }
     for (socknum = 0; socknum<  numsocks; socknum++) {
-        close(sock[socknum]);
     }
  }
  
--- 2068,2074 ----
         ndescriptors--;                                /****/
     }
     for (socknum = 0; socknum<  numsocks; socknum++) {
+        close(sock[socknum].s);
     }
  }
  
