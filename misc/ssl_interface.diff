index 4f7fb86..c3a1146 100644
--- a/src/interface.c
+++ b/src/interface.c
@@ -118,6 +118,8 @@
 #include<netinet/in.h>
 #include<netdb.h>

+#include<openssl/ssl.h>
+
 #include "db.h"
 #include "interface.h"
 #include "params.h"
@@ -152,6 +154,7 @@ struct text_queue {

 struct descriptor_data {
    int     descriptor;
+       SSL             *ssl;
    int     connected;
    int     booted;
    dbref   player;
@@ -171,8 +174,15 @@ struct descriptor_data {
    struct descriptor_data **prev;
 }      *descriptor_list = 0;

+struct socks {
+       int     s;
+       int is_ssl;
+} sock[MAX_LISTEN_PORTS];
+
+SSL_CTX *ctx;
+
 static int numsocks = 0;
-static int sock[MAX_LISTEN_PORTS];
+/* static int sock[MAX_LISTEN_PORTS]; */
 static int ndescriptors = 0;
 extern void fork_and_dump();

@@ -185,7 +195,7 @@ extern int rwhocli_userlogout(const char *uid);
 void    process_commands(void);
 void    shovechars(int portc, int* portv);
 void    shutdownsock(struct descriptor_data * d);
-struct descriptor_data *initializesock(int s, const char *hostname);
+struct descriptor_data *initializesock(int s, const char *hostname, int ssl);
 void    make_nonblocking(int s);
 void    freeqs(struct descriptor_data * d);
 void    welcome_user(struct descriptor_data * d);
@@ -195,7 +205,7 @@ int     boot_off(dbref player);
 void    boot_player_off(dbref player);
 const char *addrout(long, unsigned short, unsigned short);
 void    dump_users(struct descriptor_data * d, char *user);
-struct descriptor_data *new_connection(int sock, int port);
+struct descriptor_data *new_connection(int sock, int port, int is_ssl);
 void    parse_connect(const char *msg, char *command, char *user, char *pass);
 void    set_userstring(char **userstring, const char *command);
 int     do_command(struct descriptor_data * d, char *command);
@@ -223,6 +233,8 @@ int     online_init();
 dbref   online_next(int *ptr);
 long   max_open_files(void);

+
+
 #ifdef SPAWN_HOST_RESOLVER
 void kill_resolver();
 #endif
@@ -269,7 +281,6 @@ show_program_usage(char *prog)
    exit(1);
 }

-
 extern int sanity_violated;

 int
@@ -283,6 +294,7 @@ main(int argc, char **argv)
    int sanity_interactive;
    int sanity_autofix;
    int portcount = 0;
+       int ssl_init = 0;
    int whatport[MAX_LISTEN_PORTS];

 #ifdef DETACH
@@ -331,16 +343,23 @@ main(int argc, char **argv)
               outfile_name = argv[i];
               break;
             default:
-               whatport[portcount] = atoi(argv[i]);
-               if (portcount>= MAX_LISTEN_PORTS) {
-                   show_program_usage(*argv);
-               }
-               if (whatport[portcount]<  1 || whatport[portcount]>  65535) {
-                   show_program_usage(*argv);
+                       if (argv[i][0] == 's') {
+                               ssl_init = 1;
+                               sock[portcount].is_ssl = 1;
+                               whatport[portcount] = atoi(argv[i]+1);
+                       } else {
+                               sock[portcount].is_ssl = 0;
+                               whatport[portcount] = atoi(argv[i]);
+                       }
+                       if (portcount>= MAX_LISTEN_PORTS) {
+                               show_program_usage(*argv);
+                       }
+                       if (whatport[portcount]<  1 || whatport[portcount]>  65535) {
+                               show_program_usage(*argv);
+                       }
+                       portcount++;
+                       break;
               }
-               portcount++;
-               break;
-           }
       }
    }
    if (plain_argnum<  2) {
@@ -434,6 +453,23 @@ main(int argc, char **argv)
           }
       }

+       if(ssl_init) {
+               SSL_library_init();
+               ctx = SSL_CTX_new(SSLv23_method());
+               if(!SSL_CTX_use_certificate_chain_file(ctx, SSL_KEY_FILE)) {
+                       fprintf(stderr, "Couldn't load %s!\n", SSL_KEY_FILE);
+                       exit(2);
+               }
+               if(!SSL_CTX_use_PrivateKey_file(ctx, SSL_KEY_FILE, SSL_FILETYPE_PEM)) {
+                       fprintf(stderr, "Couldn't load %s!\n", SSL_KEY_FILE);
+                       exit(2);
+               }
+               if(!SSL_CTX_load_verify_locations(ctx, NULL, SSL_CA_DIR)) {
+                       fprintf(stderr, "Couldn't load CA from %s!\n", SSL_CA_DIR);
+                       exit(2);
+               }
+       }
+
       /* go do it */
       shovechars(portcount, whatport);

@@ -481,6 +517,8 @@ main(int argc, char **argv)
       CrT_summarize_to_file("malloc_log", "Shutdown");
 #endif

+       SSL_CTX_free(ctx);
+
       if (restart_flag) {
           char* argbuf[MAX_LISTEN_PORTS + 3];
           int socknum;
@@ -811,17 +849,41 @@ long      max_open_files(void)
 void
 goodbye_user(struct descriptor_data * d)
 {
+       BIO *io,*ssl_bio;
+
+       if(d->ssl) {
+               io=BIO_new(BIO_f_buffer());
+               ssl_bio=BIO_new(BIO_f_ssl());
+               BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+               BIO_push(io, ssl_bio);
+               BIO_write(io, "\r\n", 2);
+               BIO_write(io, tp_leave_mesg, strlen(tp_leave_mesg));
+               BIO_write(io, "\r\n\r\n", 4);
+       } else {
    write(d->descriptor, "\r\n", 2);
    write(d->descriptor, tp_leave_mesg, strlen(tp_leave_mesg));
    write(d->descriptor, "\r\n\r\n", 4);
+       }
 }

 void
 idleboot_user(struct descriptor_data * d)
 {
-    write(d->descriptor, "\r\n", 2);
-    write(d->descriptor, tp_idle_mesg, strlen(tp_idle_mesg));
-    write(d->descriptor, "\r\n\r\n", 4);
+       BIO *io,*ssl_bio;
+
+       if(d->ssl) {
+               io=BIO_new(BIO_f_buffer());
+               ssl_bio=BIO_new(BIO_f_ssl());
+               BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+               BIO_push(io, ssl_bio);
+               BIO_write(io, "\r\n", 2);
+               BIO_write(io, tp_idle_mesg, strlen(tp_idle_mesg));
+               BIO_write(io, "\r\n\r\n", 4);
+       } else {
+               write(d->descriptor, "\r\n", 2);
+               write(d->descriptor, tp_idle_mesg, strlen(tp_idle_mesg));
+               write(d->descriptor, "\r\n\r\n", 4);
+       }
    d->booted=1;
 }

@@ -848,8 +910,8 @@ shovechars(int portc, int* portv)
    int openfiles_max;

    for (socknum = 0; socknum<  portc; socknum++) {
-       sock[socknum] = make_socket(portv[socknum]);
-       maxd = sock[socknum] + 1;
+       sock[socknum].s = make_socket(portv[socknum]);
+       maxd = sock[socknum].s + 1;
       numsocks++;
    }
    gettimeofday(&last_slice, (struct timezone *) 0);
@@ -892,7 +954,7 @@ shovechars(int portc, int* portv)
       FD_ZERO(&output_set);
       if (ndescriptors<  avail_descriptors) {
           for (socknum = 0; socknum<  numsocks; socknum++) {
-               FD_SET(sock[socknum],&input_set);
+               FD_SET(sock[socknum].s,&input_set);
           }
       }
       for (d = descriptor_list; d; d = d->next) {
@@ -937,8 +999,9 @@ shovechars(int portc, int* portv)
           sel_prof_idle_use++;
           (void) time(&now);
           for (socknum = 0; socknum<  numsocks; socknum++) {
-               if (FD_ISSET(sock[socknum],&input_set)) {
-                   if (!(newd = new_connection(sock[socknum], portv[socknum]))) {
+               if (FD_ISSET(sock[socknum].s,&input_set)) {
+                   if (!(newd = new_connection(sock[socknum].s, portv[socknum],
+                                                                               sock[socknum].is_ssl))) {
                       if (errno
                               &&  errno != EINTR
                               &&  errno != EMFILE
@@ -1090,24 +1153,37 @@ wall_wizards(const char *msg)


 struct descriptor_data *
-new_connection(int sock, int port)
+new_connection(int sock, int port, int is_ssl)
 {
    int     newsock;
    struct sockaddr_in addr;
    int     addr_len;
    char    hostname[128];

+       SSL             *ssl = NULL;
+       BIO             *sbio;
+
    addr_len = sizeof(addr);
    newsock = accept(sock, (struct sockaddr *)&  addr,&addr_len);
-    if (newsock<  0) {
+               if (newsock<  0) {
       return 0;
    } else {
-       strcpy(hostname, addrout(addr.sin_addr.s_addr, addr.sin_port, port));
-       log_status("ACCEPT: %s(%d) on descriptor %d\n", hostname,
-                   ntohs(addr.sin_port), newsock);
-       log_status("CONCOUNT: There are now %d open connections.\n",
-                   ndescriptors);
-       return initializesock(newsock, hostname);
+               if (is_ssl) {
+                       sbio = BIO_new_socket(newsock, BIO_NOCLOSE);
+                       ssl = SSL_new(ctx);
+                       SSL_set_bio(ssl, sbio, sbio);
+
+                       if (SSL_accept(ssl)<=0) {
+                               close(newsock);
+                               return 0;
+                       }
+               }
+               strcpy(hostname, addrout(addr.sin_addr.s_addr, addr.sin_port, port));
+               log_status("ACCEPT: %s(%d) on descriptor %d\n", hostname,
+                               ntohs(addr.sin_port), newsock);
+               log_status("CONCOUNT: There are now %d open connections.\n",
+                               ndescriptors);
+               return initializesock(newsock, hostname, ssl);
    }
 }

@@ -1316,7 +1392,7 @@ shutdownsock(struct descriptor_data * d)
 }

 struct descriptor_data *
-initializesock(int s, const char *hostname)
+initializesock(int s, const char *hostname, int ssl)
 {
    struct descriptor_data *d;
    char buf[128], *ptr;
@@ -1324,6 +1400,7 @@ initializesock(int s, const char *hostname)
    ndescriptors++;
    MALLOC(d, struct descriptor_data, 1);
    d->descriptor = s;
+       d->ssl = ssl;
    d->connected = 0;
    d->booted = 0;
    d->connected_at = current_systime;
@@ -1474,6 +1551,7 @@ process_output(struct descriptor_data * d)
 {
    struct text_block **qp, *cur;
    int     cnt;
+       BIO             *io, *ssl_bio;

    /* drastic, but this may give us crash test data */
    if (!d || !d->descriptor) {
@@ -1485,7 +1563,22 @@ process_output(struct descriptor_data * d)
        return 1;
    }

+
+       if(d->ssl) {
+               io=BIO_new(BIO_f_buffer());
+               ssl_bio=BIO_new(BIO_f_ssl());
+               BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+               BIO_push(io, ssl_bio);
+       }
+
    for (qp =&d->output.head; cur = *qp;) {
+       if(d->ssl) {
+       cnt = BIO_write(io, cur->start, cur->nchars);
+       fprintf(stderr, "Write Returned: %d...\n", cnt);
+       BIO_flush(io);
+       fprintf(stderr, "Flushed Output");
+       }
+       else
       cnt = write(d->descriptor, cur->start, cur->nchars);
       if (cnt<  0) {
           if (errno == EWOULDBLOCK)
@@ -1590,8 +1683,16 @@ process_input(struct descriptor_data * d)
 {
    char    buf[MAX_COMMAND_LEN * 2];
    int     got;
-    char   *p, *pend, *q, *qend;
-
+    char    *p, *pend, *q, *qend;
+       BIO             *io, *ssl_bio;
+
+       if(d->ssl) {
+               io=BIO_new(BIO_f_buffer());
+               ssl_bio=BIO_new(BIO_f_ssl());
+               BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+               BIO_push(io, ssl_bio);
+               got = BIO_read(io, buf, sizeof buf);
+       } else
    got = read(d->descriptor, buf, sizeof buf);
    if (got<= 0)
       return 0;
@@ -1917,15 +2018,31 @@ close_sockets(const char *msg)
 {
    struct descriptor_data *d, *dnext;
    int socknum;
+       BIO *io,*ssl_bio;

    for (d = descriptor_list; d; d = dnext) {
        dnext = d->next;
-        write(d->descriptor, msg, strlen(msg));
-        write(d->descriptor, shutdown_message, strlen(shutdown_message));
+               if(d->ssl) {
+                       io=BIO_new(BIO_f_buffer());
+                       ssl_bio=BIO_new(BIO_f_ssl());
+                       BIO_set_ssl(ssl_bio, d->ssl, BIO_CLOSE);
+                       BIO_push(io, ssl_bio);
+                       BIO_write(io, msg, strlen(msg));
+                       BIO_write(io, shutdown_message, strlen(shutdown_message));
+                       if (shutdown(d->descriptor, 2)<  0)
+                               perror("shutdown");
+                       if(!SSL_shutdown(d->ssl))
+                               perror("shutdown");
+                       SSL_free(d->ssl);
+                       close(d->descriptor);
+               } else {
+                       write(d->descriptor, msg, strlen(msg));
+                       write(d->descriptor, shutdown_message, strlen(shutdown_message));
+                       if (shutdown(d->descriptor, 2)<  0)
+                               perror("shutdown");
+                       close(d->descriptor);
+               }
        clearstrings(d);                       /** added to clean up **/
-        if (shutdown(d->descriptor, 2)<  0)
-            perror("shutdown");
-        close(d->descriptor);
        freeqs(d);                             /****/
        *d->prev = d->next;                    /****/
        if (d->next)                           /****/
@@ -1938,7 +2055,7 @@ close_sockets(const char *msg)
        ndescriptors--;                                /****/
    }
    for (socknum = 0; socknum<  numsocks; socknum++) {
-       close(sock[socknum]);
+       close(sock[socknum].s);
    }
 }
