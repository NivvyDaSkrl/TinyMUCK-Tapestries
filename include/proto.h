/* boolexp.c */
struct boolexp *alloc_boolnode(void);
void free_boolnode(struct boolexp *ptr);
struct boolexp *copy_bool(struct boolexp *old);
int eval_boolexp_rec(dbref player, struct boolexp *b, dbref thing);
int eval_boolexp(dbref player, struct boolexp *b, dbref thing);
struct boolexp *parse_boolexp(dbref player, const char *buf, int dbloadp);
long size_boolexp(struct boolexp *b);
struct boolexp *negate_boolexp(struct boolexp *b);
struct boolexp *getboolexp(FILE *f);
void free_boolexp(struct boolexp *b);
/* case.c */
/* compile.c */
void do_abort_compile(const char *c);
void fixpubs(struct publics *mypubs, struct inst *offset);
int size_pubs(struct publics *mypubs);
char *expand_def(const char *defname);
void kill_def(const char *defname);
void insert_def(const char *defname, const char *deff);
void insert_intdef(const char *defname, int deff);
void purge_defs(void);
void include_defs(dbref i);
void init_defs(void);
void uncompile_program(dbref i);
void do_uncompile(dbref player);
void free_unused_programs(void);
void do_compile(dbref player_in, dbref program_in);
struct INTERMEDIATE *next_word(const char *token);
void advance_line(void);
const char *next_token_raw(void);
const char *next_token(void);
void do_comment(void);
void do_directive(char *direct);
const char *do_string(void);
struct INTERMEDIATE *process_special(const char *token);
struct INTERMEDIATE *primitive_word(const char *token);
struct INTERMEDIATE *string_word(const char *token);
struct INTERMEDIATE *number_word(const char *token);
struct INTERMEDIATE *call_word(const char *token);
struct INTERMEDIATE *quoted_word(const char *token);
struct INTERMEDIATE *var_word(const char *token);
struct INTERMEDIATE *lvar_word(const char *token);
struct INTERMEDIATE *object_word(const char *token);
void add_proc(const char *proc_name, struct INTERMEDIATE *place);
void addif(struct INTERMEDIATE *place);
void addelse(struct INTERMEDIATE *place);
void addbegin(struct INTERMEDIATE *place);
void addwhile(struct INTERMEDIATE *place);
struct INTERMEDIATE *locate_if(void);
struct INTERMEDIATE *find_if(void);
struct INTERMEDIATE *find_else(void);
struct INTERMEDIATE *locate_begin(void);
struct INTERMEDIATE *find_begin(void);
struct INTERMEDIATE *find_while(void);
void resolve_loop_addrs(int where);
int add_variable(const char *varname);
int add_localvar(const char *varname);
int special(const char *token);
int call(const char *token);
int quoted(const char *token);
int object(const char *token);
int string(const char *token);
int variable(const char *token);
int localvar(const char *token);
int primitive(const char *token);
int get_primitive(const char *token);
void cleanpubs(struct publics *mypub);
void cleanup(void);
void copy_program(void);
void set_start(void);
struct INTERMEDIATE *new_inst(void);
struct prog_addr *alloc_addr(int offset, struct inst *codestart);
void free_prog(struct inst *c, int siz);
long size_prog(dbref prog);
void clear_primitives(void);
void init_primitives(void);
/* compress.c */
unsigned long comp_read_line(FILE *file);
void clear_buffer(void);
void save_compress_words_to_file(FILE *f);
void init_compress_from_file(FILE *dicto);
void compression_filter(char c);
void pawprint(void);
const char *uncompress(const char *s);
const char *compress(const char *s);
/* create.c */
int exit_loop_check(dbref source, dbref dest);
void do_open(dbref player, const char *direction, const char *linkto);
int link_exit(dbref player, dbref exit, char *dest_name, dbref *dest_list);
void do_link(dbref player, const char *thing_name, const char *dest_name);
void do_dig(dbref player, const char *name, const char *pname);
void do_prog(dbref player, const char *name);
void do_edit(dbref player, const char *name);
void do_create(dbref player, char *name, char *acost);
dbref parse_source(dbref player, const char *source_name);
void set_source(dbref player, dbref action, dbref source);
int unset_source(dbref player, dbref loc, dbref action);
void do_action(dbref player, const char *action_name, const char *source_name);
void do_attach(dbref player, const char *action_name, const char *source_name);
/* db.c */
dbref getparent(dbref obj);
void free_line(struct line *l);
void free_prog_text(struct line *l);
void db_clear_object(dbref i);
dbref new_object(void);
void putref(FILE *f, dbref ref);
void putproperties_rec(FILE *f, const char *dir, dbref obj);
void putproperties(FILE *f, dbref obj);
int fetch_propvals(dbref obj, const char *dir);
void putprops_copy(FILE *f, dbref obj);
void macrodump(struct macrotable *node, FILE *f);
char *file_line(FILE *f);
void foldtree(struct macrotable *center);
int macrochain(struct macrotable *lastnode, FILE *f);
void macroload(FILE *f);
void log_program_text(struct line *first, dbref player, dbref i);
void write_program(struct line *first, dbref i);
int db_write_object(FILE *f, dbref i);
void db_write_list(FILE *f, int mode);
dbref db_write(FILE *f);
dbref db_write_deltas(FILE *f);
dbref parse_dbref(const char *s);
dbref getref(FILE *f);
int number(const char *s);
void getproperties(FILE *f, dbref obj);
void skipproperties(FILE *f, dbref obj);
void db_free_object(dbref i);
void db_free(void);
struct line *get_new_line(void);
struct line *read_program(dbref i);
void db_read_object_old(FILE *f, struct object *o, dbref objno);
void db_read_object_new(FILE *f, struct object *o, dbref objno);
void db_read_object_foxen(FILE *f, struct object *o, dbref objno, int dtype, int read_before);
void autostart_progs(void);
dbref db_read(FILE *f);
/* debugger.c */
void list_proglines(dbref player, dbref program, struct frame *fr, int start, int end);
char *show_line_prims(dbref program, struct inst *pc, int maxprims, int markpc);
struct inst *funcname_to_pc(dbref program, const char *name);
struct inst *linenum_to_pc(dbref program, int whatline);
char *unparse_sysreturn(dbref *program, struct inst *pc);
char *unparse_breakpoint(struct frame *fr, int brk);
void muf_backtrace(dbref player, dbref program, int count, struct frame *fr);
void list_program_functions(dbref player, dbref program, char *arg);
int muf_debugger(dbref player, dbref program, const char *text, struct frame *fr);
/* disassem.c */
void disassemble(dbref player, dbref program);
/* diskprop.c */
void removeobj_ringqueue(dbref obj);
void addobject_ringqueue(dbref obj, int mode);
void update_fetchstats(void);
void report_fetchstats(dbref player);
void report_cachestats(dbref player);
void diskbase_debug(dbref player);
void unloadprops_with_prejudice(dbref obj);
int disposeprops_notime(dbref obj);
int disposeprops(dbref obj);
void dispose_all_oldprops(void);
void housecleanprops(void);
int fetchprops_priority(dbref obj, int mode);
void fetchprops(dbref obj);
void dirtyprops(dbref obj);
void undirtyprops(dbref obj);
int propfetch(dbref obj, PropPtr p);
/* edit.c */
void interactive(dbref player, const char *command);
char *macro_expansion(struct macrotable *node, const char *match);
struct macrotable *new_macro(const char *name, const char *definition, dbref player);
int grow_macro_tree(struct macrotable *node, struct macrotable *newmacro);
int insert_macro(const char *macroname, const char *macrodef, dbref player, struct macrotable **node);
void do_list_tree(struct macrotable *node, const char *first, const char *last, int length, dbref player);
void list_macros(const char *word[], int k, dbref player, int length);
void purge_macro_tree(struct macrotable *node);
int erase_node(struct macrotable *oldnode, struct macrotable *node, const char *killname, struct macrotable *mtop);
int kill_macro(const char *macroname, dbref player, struct macrotable **mtop);
void free_old_macros(void);
void editor(dbref player, const char *command);
void do_insert(dbref player, dbref program, int arg[], int argc);
void do_delete(dbref player, dbref program, int arg[], int argc);
void do_quit(dbref player, dbref program);
void match_and_list(dbref player, const char *name, char *linespec);
void do_list(dbref player, dbref program, int oarg[], int argc);
void val_and_head(dbref player, int arg[], int argc);
void do_list_header(dbref player, dbref program);
void list_publics(dbref player, int arg[], int argc);
void do_list_publics(dbref player, dbref program);
void toggle_numbers(dbref player);
/* events.c */
long next_dump_time(void);
void check_dump_time(void);
void dump_db_now(void);
void delta_dump_now(void);
long next_clean_time(void);
void check_clean_time(void);
long next_rwho_time(void);
void check_rwho_time(void);
long mintime(long a, long b);
long next_muckevent_time(void);
void next_muckevent(void);
/* game.c */
void do_dump(dbref player, const char *newfile);
void do_delta(dbref player);
void do_shutdown(dbref player);
void do_restart(dbref player);
void panic(const char *message);
void dump_database(void);
void fork_and_dump(void);
int time_for_monolithic(void);
void dump_warning(void);
void dump_deltas(void);
int init_game(const char *infile, const char *outfile);
void do_restrict(dbref player, const char *arg);
void process_command(dbref player, char *command);
/* hashtab.c */
unsigned hash(register const char *s, unsigned hash_size);
hash_data *find_hash(register const char *s, hash_tab *table, unsigned size);
hash_entry *add_hash(register const char *name, hash_data data, hash_tab *table, unsigned size);
int free_hash(register const char *name, hash_tab *table, unsigned size);
void kill_hash(hash_tab *table, unsigned size, int freeptrs);
/* help.c */
void spit_file_segment(dbref player, const char *filename, const char *seg);
void spit_file(dbref player, const char *filename);
void index_file(dbref player, const char *onwhat, const char *file);
int show_subfile(dbref player, const char *dir, const char *topic, const char *seg, int partial);
void do_man(dbref player, char *topic, char *seg);
void do_mpihelp(dbref player, char *topic, char *seg);
void do_help(dbref player, char *topic, char *seg);
void do_news(dbref player, char *topic, char *seg);
void add_motd_text_fmt(const char *text);
void do_motd(dbref player, char *text);
void do_info(dbref player, const char *topic, const char *seg);
/* inst.c */
char *insttotext(struct inst *theinst, int strmax, dbref program);
char *debug_inst(struct inst *pc, struct inst *stack, int sp, dbref program);
/* interp.c */
void p_null(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void RCLEAR(struct inst *oper, char *file, int line);
void purge_free_frames(void);
void purge_all_free_frames(void);
struct inst *
create_and_run_interp_frame(dbref player, dbref location, dbref program,
       dbref source, int nosleeps, int whichperms, int rettyp
       );
struct frame *create_interp_frame(dbref player, dbref location, dbref program, dbref source, int nosleeps, int whichperms);
void prog_clean(struct frame *fr);
void reload(struct frame *fr, int atop, int stop);
int muf_false(struct inst *p);
void copyinst(struct inst *from, struct inst *to);
void copyvars(vars *from, vars *to);
void calc_profile_timing(dbref prog, struct frame *fr);
void do_abort_loop(dbref player, dbref program, const char *msg, struct frame *fr, struct inst *pc, int atop, int stop, struct inst *clinst1, struct inst *clinst2);
struct inst *interp_loop(dbref player, dbref program, struct frame *fr, int rettyp);
void interp_err(dbref player, dbref program, struct inst *pc, struct inst *arg, int atop, dbref origprog, const char *msg1, const char *msg2);
void push(struct inst *stack, int *top, int type, void *res);
int valid_player(struct inst *oper);
int valid_object(struct inst *oper);
int is_home(struct inst *oper);
int permissions(dbref player, dbref thing);
dbref find_mlev(dbref prog, struct frame *fr, int st);
dbref find_uid(dbref player, struct frame *fr, int st, dbref program);
void do_abort_interp(dbref player, const char *msg, struct inst *pc, struct inst *arg, int atop, struct frame *fr, struct inst *oper1, struct inst *oper2, struct inst *oper3, struct inst *oper4, int nargs, dbref program, char *file, int line);
void do_abort_silent(void);
/* log.c */
void log2file(char *myfilename, char *format, ...);
void log_status(char *format, ...);
void log_conc(char *format, ...);
void log_muf(char *format, ...);
void log_gripe(char *format, ...);
void log_command(char *format, ...);
void notify_fmt(dbref player, char *format, ...);
/* look.c */
void exec_or_notify(dbref player, dbref thing, const char *message, const char *whatcalled);
void look_room(dbref player, dbref loc, int verbose);
void do_look_around(dbref player);
void do_look_at(dbref player, const char *name, const char *detail);
int listprops_wildcard(dbref player, dbref thing, const char *dir, const char *wild);
long size_object(dbref i, int load);
void do_examine(dbref player, const char *name, const char *dir);
void do_score(dbref player);
void do_inventory(dbref player);
void display_objinfo(dbref player, dbref obj, int output_type);
void do_find(dbref player, const char *name, const char *flags);
void do_owned(dbref player, const char *name, const char *flags);
void do_trace(dbref player, const char *name, int depth);
void do_entrances(dbref player, const char *name, const char *flags);
void do_contents(dbref player, const char *name, const char *flags);
void exit_match_exists(dbref player, dbref obj, const char *name);
void do_sweep(dbref player, const char *name);
/* msgparse.c */
int Wizperms(dbref what);
int safeputprop(dbref obj, dbref perms, char *buf, char *val);
const char *safegetprop_strict(dbref player, dbref what, dbref perms, const char *inbuf);
const char *safegetprop_limited(dbref player, dbref what, dbref whom, dbref perms, const char *inbuf);
const char *safegetprop(dbref player, dbref what, dbref perms, const char *inbuf);
char *stripspaces(char *buf, char *in);
char *string_substitute(const char *str, const char *oldstr, const char *newstr, char *buf, int maxlen);
const char *get_list_item(dbref player, dbref what, dbref perms, const char *listname, int itemnum);
int get_list_count(dbref player, dbref obj, dbref perms, const char *listname);
char *get_concat_list(dbref player, dbref what, dbref perms, dbref obj, const char *listname, char *buf, int maxchars, int mode);
int mesg_read_perms(dbref player, dbref perms, dbref obj);
int isneighbor(dbref d1, dbref d2);
int mesg_proximity_perms(dbref player, dbref perms, dbref obj);
dbref mesg_dbref_raw(dbref player, dbref what, dbref perms, const char *buf);
dbref mesg_dbref_read(dbref player, dbref what, dbref perms, char *buf);
dbref mesg_dbref_write(dbref player, dbref what, dbref perms, char *buf);
dbref mesg_dbref_exec(dbref player, dbref what, dbref perms, char *buf);
dbref mesg_dbref_proximity(dbref player, dbref what, dbref perms, char *buf);
char *ref2str(dbref obj, char *buf);
int truestr(char *buf);
int new_mvar(const char *varname, char *buf);
char *get_mvar(const char *varname);
int free_top_mvar(void);
int new_mfunc(const char *funcname, const char *buf);
const char *get_mfunc(const char *funcname);
int free_mfuncs(int downto);
int msg_is_macro(dbref player, dbref what, dbref perms, const char *name);
int find_mfn(const char *name);
void insert_mfn(const char *name, int i);
void purge_mfns(void);
void mesg_init(void);
char *cr2slash(char *buf, const char *in);
char *mesg_parse(dbref player, dbref what, dbref perms, const char *inbuf, char *outbuf, int maxchars, int mesgtyp);
char *do_parse_mesg_2(dbref player, dbref what, dbref perms, const char *inbuf, const char *abuf, char *outbuf, int mesgtyp);
char *do_parse_mesg(dbref player, dbref what, const char *inbuf, const char *abuf, char *outbuf, int mesgtyp);
/* move.c */
void moveto(dbref what, dbref where);
void send_contents(dbref loc, dbref dest);
void maybe_dropto(dbref loc, dbref dropto);
int parent_loop_check(dbref source, dbref dest);
void enter_room(dbref player, dbref loc, dbref exit);
void send_home(dbref thing, int puppethome);
int can_move(dbref player, const char *direction, int lev);
void trigger(dbref player, dbref exit, int pflag);
void do_move(dbref player, const char *direction, int lev);
void do_leave(dbref player);
void do_get(dbref player, const char *what, const char *obj);
void do_drop(dbref player, const char *name, const char *obj);
void do_recycle(dbref player, const char *name);
void recycle(dbref player, dbref thing);
/* crt_malloc.c */
/* oldcompress.c */
const char *old_compress(const char *s);
const char *old_uncompress(const char *s);
/* player.c */
dbref lookup_player(const char *name);
dbref connect_player(const char *name, const char *password);
dbref create_player(const char *name, const char *password);
void do_password(dbref player, const char *old, const char *newobj);
void clear_players(void);
void add_player(dbref who);
void delete_player(dbref who);
void set_password(dbref player, const char *password);
int check_password(dbref player, const char *password);
/* predicates.c */
int can_link_to(dbref who, object_flag_type what_type, dbref where);
int can_link(dbref who, dbref what);
int could_doit(dbref player, dbref thing);
int test_lock(dbref player, dbref thing, const char *lockprop);
int test_lock_false_default(dbref player, dbref thing, const char *lockprop);
int can_doit(dbref player, dbref thing, const char *default_fail_msg);
int can_see(dbref player, dbref thing, int can_see_loc);
int controls_core(dbref who, dbref what, int wizcheck);
int controls(dbref who, dbref what);
int controls_nowizperm(dbref who, dbref what);
int may_read_nowizperm(dbref who, dbref what);
int may_read(dbref who, dbref what);
int restricted(dbref player, dbref thing, object_flag_type flag);
int payfor(dbref who, int cost);
int word_start(const char *str, const char let);
int ok_name(const char *name);
int ok_player_name(const char *name);
int ok_password(const char *password);
dbref what_zone(dbref obj);
/* p_connects.c */
void prim_awakep(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_online(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_concount(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_condbref(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_conidle(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_contime(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_conhost(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_conuser(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_conboot(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_connotify(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_condescr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_descrcon(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_nextdescr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_descriptors(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_descr_setuser(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_db.c */
void copyobj(dbref player, dbref old, dbref dnew);
void prim_addpennies(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_moveto(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_pennies(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_dbcomp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_dbref(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_contents(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_exits(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_next(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_truename(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_name(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_setname(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_match(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_rmatch(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_copyobj(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_set(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_mlevel(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_flagp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_playerp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_thingp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_roomp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_programp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_exitp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_okp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_location(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_owner(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_controls(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_getlink(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
int prog_can_link_to(int mlev, dbref who, object_flag_type what_type, dbref where);
void prim_setlink(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_setown(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_newobject(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_newroom(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_newexit(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_lockedp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_recycle(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_setlockstr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_getlockstr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_part_pmatch(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_checkpassword(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_math.c */
int arith_type(struct inst *op1, struct inst *op2);
void prim_add(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_subtract(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_multiply(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_divide(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_mod(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_bitor(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_bitxor(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_bitand(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_bitshift(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_and(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_or(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_not(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_lessthan(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_greathan(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_equal(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_lesseq(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_greateq(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_random(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_int(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_misc.c */
void prim_time(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_date(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_gmtoffset(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_systime(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_timesplit(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_timefmt(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_queue(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_kill(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_force(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_timestamps(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_fork(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_pid(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_stats(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_abort(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_ispidp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_parselock(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_unparselock(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_prettylock(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_testlock(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_sysparm(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_props.c */
int prop_read_perms(dbref player, dbref obj, const char *name, int mlev);
int prop_write_perms(dbref player, dbref obj, const char *name, int mlev);
void prim_getpropval(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_getprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_getpropstr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_remove_prop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_envprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_envpropstr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_setprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_addprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_nextprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_propdirp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_parseprop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_stack.c */
void prim_pop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_dup(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_at(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_bang(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_var(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_localvar(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_swap(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_over(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_pick(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_put(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_rot(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_rotate(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_dbtop(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_depth(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_version(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_prog(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_trig(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_caller(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_intp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_stringp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_dbrefp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_addressp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_lockp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_checkargs(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_mode(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_setmode(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_interp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* p_strings.c */
void prim_numberp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_stringcmp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strcmp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strncmp(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strcut(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strlen(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strcat(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_atoi(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_notify(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_notify_exclude(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_intostr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_explode(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_subst(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_instr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_rinstr(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_pronoun_sub(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_toupper(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_tolower(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_unparseobj(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_smatch(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_striplead(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_striptail(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_stringpfx(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strencrypt(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
void prim_strdecrypt(dbref player, dbref program, int mlev, struct inst *pc, struct inst *arg, int *top, struct frame *fr);
/* property.c */
void set_property_nofetch(dbref player, const char *type, int flags, int value);
void set_property(dbref player, const char *type, int flags, int value);
void set_lock_property(dbref player, const char *type, const char *lok);
void add_prop_nofetch(dbref player, const char *type, const char *oclass, int value);
void add_property(dbref player, const char *type, const char *pclass, int value);
void remove_proplist_item(dbref player, PropPtr p, int allp);
void remove_property_list(dbref player, int all);
void remove_property_nofetch(dbref player, const char *type);
void remove_property(dbref player, const char *type);
PropPtr get_property(dbref player, const char *type);
int has_property(dbref player, dbref what, const char *type, const char *pclass, int value);
int has_property_strict(dbref player, dbref what, const char *type, const char *pclass, int value);
const char *get_property_class(dbref player, const char *type);
int get_property_value(dbref player, const char *type);
dbref get_property_dbref(dbref player, const char *pclass);
struct boolexp *get_property_lock(dbref player, const char *pclass);
int get_property_flags(dbref player, const char *type);
int get_property_type(dbref player, const char *type);
PropPtr copy_prop(dbref old);
int genderof(dbref player);
PropPtr first_prop_nofetch(dbref player, const char *dir, PropPtr *list, char *name);
PropPtr first_prop(dbref player, const char *dir, PropPtr *list, char *name);
PropPtr next_prop(PropPtr list, PropPtr prop, char *name);
char *next_prop_name(dbref player, char *outbuf, char *name);
long size_properties(dbref player, int load);
int is_propdir_nofetch(dbref player, const char *type);
int is_propdir(dbref player, const char *type);
PropPtr envprop(dbref *where, const char *propname, int typ);
const char *envpropstr(dbref *where, const char *propname);
char *displayprop(dbref player, dbref obj, const char *name, char *buf);
int db_get_single_prop(FILE *f, dbref obj, long pos);
void db_getprops(FILE *f, dbref obj);
void db_putprop(FILE *f, const char *dir, PropPtr p);
void db_dump_props_rec(dbref obj, FILE *f, const char *dir, PropPtr p);
void db_dump_props(FILE *f, dbref obj);
void untouchprop_rec(PropPtr p);
void untouchprops_incremental(int limit);
/* propdirs.c */
PropPtr propdir_new_elem(PropPtr *l, char *path);
PropPtr propdir_delete_elem(PropPtr l, char *path);
PropPtr propdir_get_elem(PropPtr l, char *path);
PropPtr propdir_first_elem(PropPtr l, char *path);
PropPtr propdir_next_elem(PropPtr l, char *path);
int propdir_check(PropPtr l, char *path);
/* props.c */
PropPtr alloc_propnode(const char *name);
void free_propnode(PropPtr p);
void clear_propnode(PropPtr p);
void delete_proplist(PropPtr p);
PropPtr locate_prop(PropPtr list, char *name);
PropPtr new_prop(PropPtr *list, char *name);
PropPtr delete_prop(PropPtr *list, char *name);
PropPtr first_node(PropPtr list);
PropPtr next_node(PropPtr ptr, char *name);
void copy_proplist(dbref obj, PropPtr *pnew, PropPtr old);
long size_proplist(PropPtr avl);
int Prop_Check(const char *name, const char what);
/* rob.c */
void do_rob(dbref player, const char *what);
void do_kill(dbref player, const char *what, int cost);
void do_give(dbref player, const char *recipient, int amount);
/* rwho.c */
int rwhocli_setup(const char *server, const char *serverpw, const char *myname, const char *comment);
int rwhocli_shutdown(void);
int rwhocli_pingalive(void);
int rwhocli_userlogin(const char *uid, const char *name, time_t tim);
int rwhocli_userlogout(const char *uid);
/* sanity.c */
void SanPrint(dbref player, const char *format, ...);
void sane_dump_object(dbref player, const char *arg);
void violate(dbref player, dbref i, const char *s);
void check_room(dbref player, dbref obj);
void check_thing(dbref player, dbref obj);
void check_exit(dbref player, dbref obj);
void check_player(dbref player, dbref obj);
void check_program(dbref player, dbref obj);
void check_garbage(dbref player, dbref obj);
void check_contents_list(dbref player, dbref obj);
void check_exits_list(dbref player, dbref obj);
void check_object(dbref player, dbref obj);
void sanity(dbref player);
void san_fixed_log(char *format, int unparse, dbref ref1, dbref ref2);
void cut_all_chains(dbref obj);
void cut_bad_recyclable(void);
void cut_bad_contents(dbref obj);
void cut_bad_exits(dbref obj);
void hacksaw_bad_chains(void);
char *rand_password(void);
void create_lostandfound(dbref *player, dbref *room);
void fix_room(dbref obj);
void fix_thing(dbref obj);
void fix_exit(dbref obj);
void fix_player(dbref obj);
void fix_program(dbref obj);
void fix_garbage(dbref obj);
void find_misplaced_objects(void);
void adopt_orphans(void);
void clean_global_environment(void);
void sanfix(dbref player);
void sanechange(dbref player, const char *command);
void extract_prop(FILE *f, const char *dir, PropPtr p);
void extract_props_rec(FILE *f, dbref obj, const char *dir, PropPtr p);
void extract_props(FILE *f, dbref obj);
void extract_program(FILE *f, dbref obj);
void extract_object(FILE *f, dbref d);
void extract(void);
void extract_single(void);
void hack_it_up(void);
void san_main(void);
/* set.c */
void do_name(dbref player, const char *name, char *newname);
void do_describe(dbref player, const char *name, const char *description);
void do_idescribe(dbref player, const char *name, const char *description);
void do_doing(dbref player, const char *name, const char *mesg);
void do_fail(dbref player, const char *name, const char *message);
void do_success(dbref player, const char *name, const char *message);
void do_drop_message(dbref player, const char *name, const char *message);
void do_osuccess(dbref player, const char *name, const char *message);
void do_ofail(dbref player, const char *name, const char *message);
void do_odrop(dbref player, const char *name, const char *message);
void do_oecho(dbref player, const char *name, const char *message);
void do_pecho(dbref player, const char *name, const char *message);
int setlockstr(dbref player, dbref thing, const char *keyname);
void do_conlock(dbref player, const char *name, const char *keyname);
void do_flock(dbref player, const char *name, const char *keyname);
void do_olock(dbref player, const char *name, const char *keyname);
void do_rlock(dbref player, const char *name, const char *keyname);
void do_chlock(dbref player, const char *name, const char *keyname);
void do_lock(dbref player, const char *name, const char *keyname);
void do_unlock(dbref player, const char *name);
int controls_link(dbref who, dbref what);
void do_unlink(dbref player, const char *name);
void do_chown(dbref player, const char *name, const char *newowner);
void do_set(dbref player, const char *name, const char *flag);
void do_propset(dbref player, const char *name, const char *prop);
/* signal.c */
void our_signal(int signo, void (*sighandler)(int));
void set_signals(void);
void bailout(int sig);
void sig_dump_status(int i);
void sig_reap_resolver(int i);
/* smatch.c */
char *cstrchr(char *s, char c);
char *estrchr(char *s, char c, char e);
int cstrcmp(char *s, char *t);
int cstrncmp(char *s, char *t, int n);
int equalstr(char *pattern, char *str);
/* speech.c */
void do_say(dbref player, const char *message);
void do_whisper(dbref player, const char *arg1, const char *arg2);
void do_pose(dbref player, const char *message);
void do_wall(dbref player, const char *message);
void do_gripe(dbref player, const char *message);
void do_page(dbref player, const char *arg1, const char *arg2);
void notify_listeners(dbref who, dbref xprog, dbref obj, dbref room, const char *msg, int isprivate);
void notify_except(dbref first, dbref exception, const char *msg, dbref who);
void parse_omessage(dbref player, dbref dest, dbref exit, const char *msg, const char *prefix, const char *whatcalled);
int blank(const char *s);
/* strftime.c */
void int2str(char *buf, int val, int len, char pref);
int format_time(char *buf, int max_len, const char *fmt, struct tm *tmval);
long get_tz_offset(void);
/* stringutil.c */
int alphanum_compare(const char *t1, const char *s2);
int string_compare(register const char *s1, register const char *s2);
const char *exit_prefix(register const char *string, register const char *prefix);
int string_prefix(register const char *string, register const char *prefix);
const char *string_match(register const char *src, register const char *sub);
char *pronoun_substitute(dbref player, const char *str);
char *alloc_string(const char *string);
struct shared_string *alloc_prog_string(const char *s);
char *string_dup(const char *s);
char *intostr(int i);
const char *name_mangle(dbref obj);
const char *unmangle(dbref player, const char *s);
void init_crypt(void);
const char *strencrypt(const char *data, const char *key);
const char *strdecrypt(const char *data, const char *key);
/* timequeue.c */
int control_process(dbref player, int count);
int add_event(int event_typ, int subtyp, int dtime, dbref player, dbref loc, dbref trig, dbref program, struct frame *fr, const char *strdata, const char *strcmd, const char *str3);
int add_mpi_event(int delay, dbref player, dbref loc, dbref trig, const char *mpi, const char *cmdstr, const char *argstr, int listen_p, int omesg_p);
int add_muf_queue_event(dbref player, dbref loc, dbref trig, dbref prog, const char *argstr, const char *cmdstr, int listen_p);
int add_muf_delayq_event(int delay, dbref player, dbref loc, dbref trig, dbref prog, const char *argstr, const char *cmdstr, int listen_p);
int add_muf_read_event(dbref player, dbref prog, struct frame *fr);
int add_muf_delay_event(int delay, dbref player, dbref loc, dbref trig, dbref prog, struct frame *fr, const char *mode);
void handle_read_event(dbref player, const char *command);
void next_timequeue_event(void);
int in_timequeue(int pid);
long next_event_time(void);
void list_events(dbref player);
int dequeue_prog(dbref program, int sleeponly);
int dequeue_process(int pid);
void do_dequeue(dbref player, const char *arg1);
int scan_instances(dbref program);
void propqueue(dbref player, dbref where, dbref trigger, dbref what, dbref xclude, const char *propname, const char *toparg, int mlev, int mt);
void envpropqueue(dbref player, dbref where, dbref trigger, dbref what, dbref xclude, const char *propname, const char *toparg, int mlev, int mt);
void listenqueue(dbref player, dbref where, dbref trigger, dbref what, dbref xclude, const char *propname, const char *toparg, int mlev, int mt, int mpi_p);
/* timestamp.c */
void ts_newobject(struct object *thing);
void ts_useobject(dbref thing);
void ts_lastuseobject(dbref thing);
void ts_modifyobject(dbref thing);
/* tune.c */
int tune_count_parms(void);
void tune_display_parms(dbref player, char *name);
void tune_save_parms_to_file(FILE *f);
void tune_save_parmsfile(void);
const char *tune_get_parmstring(const char *name, int mlev);
int tune_setparm(const char *parmname, const char *val);
void tune_load_parms_from_file(FILE *f, dbref player, int cnt);
void tune_load_parmsfile(dbref player);
void do_tune(dbref player, char *parmname, char *parmval);
/* unparse.c */
const char *unparse_flags(dbref thing);
const char *unparse_object(dbref player, dbref loc);
const char *unparse_boolexp(dbref player, struct boolexp *b, int fullname);
/* utils.c */
dbref remove_first(dbref first, dbref what);
int member(dbref thing, dbref list);
dbref reverse(dbref list);
/* wiz.c */
void do_teleport(dbref player, const char *arg1, const char *arg2);
void do_force(dbref player, const char *what, char *command);
void do_stats(dbref player, const char *name);
void do_boot(dbref player, const char *name);
void do_toad(dbref player, const char *name, const char *recip);
void do_newpassword(dbref player, const char *name, const char *password);
void do_pcreate(dbref player, const char *user, const char *password);
void do_serverdebug(dbref player, const char *arg1, const char *arg2);
void do_usage(dbref player);
void do_muf_topprofs(dbref player, char *arg1);
void do_mpi_topprofs(dbref player, char *arg1);
void do_all_topprofs(dbref player, char *arg1);
void do_memory(dbref who);
/* interface.c */
void show_program_usage(char *prog);
int main(int argc, char **argv);
int notify_nolisten(dbref player, const char *msg, int isprivate);
int notify_from_echo(dbref from, dbref player, const char *msg, int isprivate);
int notify_from(dbref from, dbref player, const char *msg);
int notify(dbref player, const char *msg);
struct timeval timeval_sub(struct timeval now, struct timeval then);
int msec_diff(struct timeval now, struct timeval then);
struct timeval msec_add(struct timeval t, int x);
struct timeval update_quotas(struct timeval last, struct timeval current);
long max_open_files(void);
void shovechars(int portc, int *portv);
void wall_and_flush(const char *msg);
void flush_user_output(dbref player);
void wall_wizards(const char *msg);
void kill_resolver(void);
void spawn_resolver(void);
void resolve_hostnames(void);
const char *addrout(long a, unsigned short prt, unsigned short servport);
int make_socket(int port);
struct text_block *make_text_block(const char *s, int n);
void free_text_block(struct text_block *t);
void make_nonblocking(int s);
char *strsave(const char *s);
void set_userstring(char **userstring, const char *command);
void process_commands(void);
void interact_warn(dbref player);
void parse_connect(const char *msg, char *command, char *user, char *pass);
int boot_off(dbref player);
void boot_player_off(dbref player);
void close_sockets(const char *msg);
void do_armageddon(dbref player, const char *msg);
void emergency_shutdown(void);
char *time_format_1(long dt);
char *time_format_2(long dt);
void announce_puppets(dbref player, const char *msg, const char *prop);
void announce_connect(dbref player);
void init_descr_count_lookup(void);
void update_desc_count_table(void);
void init_descriptor_lookup(void);
void remember_player_descr(dbref player, int descr);
void forget_player_descr(dbref player, int descr);
int online(dbref player);
int pcount(void);
int pidle(int c);
dbref pdbref(int c);
int pontime(int c);
char *phost(int c);
char *puser(int c);
int pfirstconn(dbref who);
void pboot(int c);
void pnotify(int c, char *outstr);
int pdescr(int c);
int pnextdescr(int c);
int pdescrcon(int c);
int pset_user(int c, dbref who);
dbref partial_pmatch(const char *name);
void update_rwho(void);
void dump_status(void);
/* version.c */
void do_credits(dbref player);
